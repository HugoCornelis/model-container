-*- outline -*-

* Compiling and Installing

** What are the basics of installing ?
In the Neurospaces source directory (with the file 'main.c'), type
'./configure', 'make', 'make install'.  Note: if you want to
uninstall, do 'make uninstall'.  Perhaps, it is a good idea to install
with something like '(make && make check && sudo make install)
>/tmp/neurospaces_install_log 2>&1 & tail -f
/tmp/neurospaces_install_log' (all on one line), which gives you an
additional log in /tmp/neurospaces_install_log and shows the log
during the build and installation process.

Additionally in the tests directory, run the script './tests_2_html'.
Next, point your webbrowser to 'tests/html/index.html'.  This is a
specification of the tests, and contains raw examples how Neurospaces
can be used to explore an instantiated model.

** What are the dependencies ?
For Neurospaces only, you have to execute the following commands as
the admin, and follow dependencies:

perl -MCPAN -e 'install Clone'
perl -MCPAN -e 'install Expect::Simple'
perl -MCPAN -e 'install YAML'
perl -MCPAN -e 'install File::Find::Rule'
perl -MCPAN -e 'install Digest::SHA'
perl -MCPAN -e 'install Data::Utilities'

** For the neurospaces emacs mode:

Add to your emacs file (if needed):

;; neurospaces mode

(load-file "/share/emacs/site-lisp/neurospaces-mode/neurospaces-vars.el")
(load-file "/share/emacs/site-lisp/neurospaces-mode/neurospaces-langs.el")
(load-file "/share/emacs/site-lisp/neurospaces-mode/neurospaces-mode.el")

(load-file "/share/emacs/site-lisp/neurospaces-mode/neurospaces-files.el")

** What are the dependencies for the neurospaces studio:

*** Binary Libraries
**** Graphviz
at www.graphviz.org, install the plain graphviz package from source
(not from an rpm).
**** Glib & Gtk++
I have not seen any recent system without them.  You need to devel
packages too to get the perl modules installed.
**** SDL
www.libsdl.org www.libsdl.org/projects
Install the following packages :
plain SDL 1.2
SDL_image
SDL_mixer
SDL_net
SDL_ttf

Again, you need the devel packages too, to get the perl modules
installed.

from http://www.dulug.de/loki/open-source/smpeg/

download and install smpeg-0.4.4-1.i386.rpm and the related devel
package (not really sure if that is needed too, I guess not).

from www.ferzkopp.net/Software/SDL_gfx-2.0/

download and install SDL_gfx-2.0.13-1.i386.rpm and related packages (4
in total, although I think the base package should suffice).

*** perl modules
Contact your sysadmin, or do something like 'su -', 'perl -MCPAN
-e 'install <module-name>'.  The perl prerequisites are (besides their
binary backends and the devel packages) :

**** perl -MCPAN -e 'install ExtUtils::Depends;' (Gtk2)
**** perl -MCPAN -e 'install ExtUtils::PkgConfig;' (Gtk2)
**** perl -MCPAN -e 'install Glib;' (Gtk2)
**** perl -MCPAN -e 'install Cairo;' (Gtk2)
**** perl -MCPAN -e 'install Gtk2;'

**** perl -MCPAN -e 'install Bundle::CPAN;' (SDL uses Build.pl, so make sure you have the latest)

**** perl -MCPAN -e 'install GraphViz;'
**** perl -MCPAN -e 'install SDL;'


The ones below get installed automatically if you follow dependencies:

**** perl -MCPAN -e 'install Array::Iterator;' (Tree::Parser)
**** perl -MCPAN -e 'install Tree::Simple;' (Tree::Parser)
**** perl -MCPAN -e 'install Tree::Parser;' (Module::Signature)
**** perl -MCPAN -e 'install PAR::Dist;' (Module::Signature)
**** perl -MCPAN -e 'install Module::Signature;' (Bundle::CPAN)
**** perl -MCPAN -e 'install Digest::SHA' (Bundle::CPAN)
**** perl -MCPAN -e 'install IO::Zlib;' (Bundle::CPAN)
**** perl -MCPAN -e 'install ExtUtils::CBuilder;' (ExtUtils::ParseXS)
**** perl -MCPAN -e 'install ExtUtils::ParseXS;' (Enable C_support for Module::Build)
**** perl -MCPAN -e 'install Module::Build' (SDL)
**** perl -MCPAN -e 'install Bundle::CPAN;' (SDL uses Build.pl, so make sure you have the latest)
**** perl -MCPAN -e 'install ExtUtils::Depends;' (Gtk2)
**** perl -MCPAN -e 'install ExtUtils::PkgConfig;' (Gtk2)
**** perl -MCPAN -e 'install Glib;'
**** perl -MCPAN -e 'install Gtk2;'
**** perl -MCPAN -e 'install IPC::Run;' (GraphViz)
**** perl -MCPAN -e 'install GraphViz;'
**** perl -MCPAN -e 'install Makefile::Parser;' (Makefile::GraphViz)
**** perl -MCPAN -e 'install Makefile::GraphViz;'
**** perl -MCPAN -e 'install Test::More' (Test::Base)
**** perl -MCPAN -e 'install Test::Base' (YAML)
**** perl -MCPAN -e 'install YAML' (SDL)
**** perl -MCPAN -e 'install SDL'

If 'perl -e "use SDL"' try the following:

The SDL_perl install seems currently broken.  Therefore, on some
systems you might want to do something like :

cd /usr/lib/perl5/site_perl/5.8.5/i386-linux-thread-multi/auto/
mv src/SDL .
mv src/SDL_perl .

I also added a couple of (mostly harmless) config statements in the
startup code of neurospaces for finding the perl_sdl shared objects,
to get things to work on ubuntu 6.  For other systems this might not
work.

**** perl -MCPAN -e 'install IO::Pty (Expect)
**** perl -MCPAN -e 'install IO::Tty (Expect)
**** perl -MCPAN -e 'install Expect' (Expect::Simple)
**** perl -MCPAN -e 'install Expect::Simple'
**** perl -MCPAN -e 'install Parse::RecDescent' (Inline, for Inline::C)
**** perl -MCPAN -e 'install Inline'
**** perl -MCPAN -e 'install HTML::QuickTable'
**** perl -MCPAN -e 'install HTML::Template'
**** perl -MCPAN -e 'install HTML::Table'
**** perl -MCPAN -e 'install Clone'
**** perl -MCPAN -e 'install Number::Compare' (File::Find::Rule)
**** perl -MCPAN -e 'install File::Find::Rule'

Note that some Linux distros come with some of these installed, or
have prebuilt packages, some don't.  Also you probably need a
'~/.gnupg' directory.

*** for rhel4
You have to add '-lncurses' just before '-lhistory' (space separated).
in the Makefile for building the swig perl glue:
./glue/swig/perl/Makefile.

*** for ubuntu 
The following packages below can be used:

perl-dev

readline-dev
swig
perl-inline
gv

perl clone
perl yaml
perl expect
perl file find rule
perl digest sha (not sha1)

** I do not have SDL installed.
Compile and run as usual, it is supposed to work well, but without the
3D rendering functionality.  Disabling only this feature is yet
untested, so perhaps Neurospaces will not work properly.  Let me
(hugo.cornelis@gmail.com) know what happens, I will be happy to see if
I can fix any problems (if any).

** I do not have Gtk++ installled.
You cannot use the Neurospaces explorer.  Start Neurospaces with the
'-P' option.


* Running

** How to startup Neurospaces ?
Go to the source directory (with the file 'main.c') and type
'./neurospacesparse -q'.  If this command gives a neurospaces prompt,
everything is alright.

** How to setup the library of models ?
Set one of the environment variables NEUROSPACES_NMC_USER_MODELS
NEUROSPACES_NMC_PROJECT_MODELS, NEUROSPACES_NMC_SYSTEM_MODELS or
NEUROSPACES_NMC_MODELS to point to the appropriate directory (absolute
path).  For a bash something like

'export NEUROSPACES_NMC_MODELS=/home/hugo/neurospaces/library'

is needed.  The library that comes with Neurospaces, contains many
working models.  The file 'legacy/cells/purk2m9s.ndf' and
'cells/purkinje/edsjb1994.ndf' are two versions of Erik De
Schutter's and James Bower's full featured Purkinje cell model.

** How to make sure that Neurospaces works well on my machine ?
Run the test suite.  Go the source directory (with the file 'main.c')
and type 'make check'.  Wait a few minutes and examine the test
report.

** How to load models into Neurospaces ?
Pass the model you want to load on the command line, after setting one
of the environment variables.

F.i. 'neurospacesparse cells/purk2m9s.ndf'.

** How to examine loaded models ?
Use the querymachine interface or even better the Neurospaces studio
explorer (see Neurospaces studio package).

** How to examine models with the querymachine ?
Pass the command line option to enter the querymachine after the model
was loaded ('-q').  F.i. './neurospacesparse -q cells/purk2m9s.ndf'.
Use the 'help' command to find out what commands exist.  Note that the
querymachine is a low-level interface, much more meant for testing
than anything else.  Better is to use the Studio package for model
exploration.

** How to examine models with Neurospaces explorer ?
Pass the command line option to enter the GUI after the model was
loaded ('-g').  F.i. './neurospaces -g cells/purk2m9s.ndf'.

** How to render a network with the 3D engine ?
First enter the Neurospaces explorer (see elsewhere how to do that).
Next open the part of the network you want to visualize in a listbox
window.  Click the 'Render' button.  Hint: for large networks, first
switch to segment view, or have a fast CPU / good graphics card.  Note
2: some things cannot be rendered (yet), projections e.g. cannot be
rendered.

** How to generate an overview of a network ?
First enter the Neurospaces explorer (see elsewhere how to do that).
Next click the button 'Overview', and set the following options :
*** maximum number of components
*** depth of overview
Next click the button 'Render'.  Note: you must have gv installed, and
the perl GraphViz package for this to work.


* Rendering

** How do I find the scene ?
Use the following keys :
*** up/down/left/right/ cursor keys, z/x
*** a/d to turn
*** tab to turn 180 degrees (look behind)


* Neurospaces Description Format (ndf)

** How to convert a Neurospaces ndf file to Neurospaces xml ?
Use the des2xml convertor in the convertors directory.  F.i. 'des2xml
purk2m9s.ndf purk2m9s.xml'.

** How to convert a Neurospaces xml file to Neurospaces ndf ?
Use the xsl transformation in the convertors directory.  You need an
xslt processor to apply the transformation to the xml file.  If you
have apache's xalan installed, 'java org.apache.xalan.xslt.Process
-IN golgi.xml -XSL xml2des.xsl -out golgi.ndf'.

** How to load an existing cell Genesis model ?
Convert the model to Neurospaces ndf format using the morphology2ndf
convertor.  F.i. 'morphology2ndf Purk2M9s.p purk2m9s.ndf'.

** How to load an swc morphology ?
Convert the model to Neurospaces ndf format using the morphology2ndf
convertor.  F.i. 'morphology2ndf mouse1.swc mouse1.ndf'.


* Other sources of information

** Design and internal workings
See the publication list at http://www.neurospaces.org.

** Manual
There is currently no official manual of Neurospaces.  The tests in
'./tests/specifications' contain many examples of how to inspect a
model.  The tests will be used in future versions of Neurospaces to
automatically generate a tutorial like manual (learn by example
instead of learn by specification).  There is still a lot of work to
be done in this area (as well as other areas).

The distribution comes with htmlified test specifications.  If not, in
the tests directory, run the script './tests_2_html'.  Next, point
your webbrowser to 'tests/html/index.html'.  This is a specification
of the tests, and contains raw examples how Neurospaces can be used to
explore an instantiated model.

** Add new components
Difficult at the moment.  Here are the steps, say for adding a
component with name AXON:
*** Add a tokenizer to analyzer.l
*** Add the token to description.tokens
*** Add the necessary grammar rules to parser.rules
Most of the following involve simple copying operations and can be
automated:
**** Add a rule for reducing the NT AxonSymbol to NT AnySymbol
**** Add a rule for AxonComponent, to place the axon in the hierarchy
**** Add a rule for AxonSymbol
**** Add a rule for AxonSection
***** This defines the possibility of bindables and bindings
**** Add a rule for AxonDescription
**** Perhaps add the new type to YYSTYPE
*** Add files axon.h, axon.c
Again, this step involves simple copying and should be automated.
**** Use pool.h, pool.c as a template
**** Decide what parameters should be scaled and get default values etc.
*** Define the aspects for the new component.
**** Adapt hierarchy/symbols
**** Define the relationships for instanceof()
**** Define biological level for axons in biolevel.[ch]
*** Integrate the new component in the development process
**** Adapt Makefile.am
**** Check, correct existing tests.
Note: the switches test checks for parser states.  This needs to be
updated because of the added grammar rules.
**** Write new tests for the new component.

** Add new virtual calls
*** Add the call at the appropriate level in hierarchy/symbols
*** Add the necessary function to symboltable.[ch].
Probably you just need to include the code generated by the generator.
*** If necessary, locate all the calls to be replaced, using grep or prcsfind.
And replace them with the new function invocation.
You can automate with perl -i -pe 's///', if convenient.
*** Remove obsoleted functions and defines.
*** Implement the class functions, in all classes where necessary.
