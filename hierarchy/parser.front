/* -*- C -*- */

%union {
    char *pcIdentifier;
    double dNumber;
    int iCompOptions;
/*     int iInteger; */
    struct symtab_Attachment *patta;
    struct symtab_AxonHillock *paxhi;
    struct symtab_BioComponent *pbio;
    struct symtab_Cell *pcell;
    struct symtab_Channel *pchan;
    struct symtab_ConcentrationGateKinetic *pcgatk;
    struct symtab_HHGate *pgathh;
    struct symtab_Connection *pconn;
    struct symtab_ConnectionSymbol *pconsy;
    struct symtab_ContourPoint *pcpnt;
    struct symtab_EMContour *pemc;
    struct symtab_Equation *peq;
    struct symtab_Fiber *pfibr;
    struct symtab_Function *pfun;
    struct symtab_GateKinetic *pgatk;
    struct symtab_Group *pgrup;
    struct symtab_GroupedParameters *pgrpp;
    struct symtab_HSolveListElement *phsle;
    struct symtab_IOContainer *pioc;
    struct symtab_IdentifierIndex *pidin;
    struct symtab_InputOutput *pio;
    struct symtab_Network *pnetw;
    struct symtab_Parameters *ppar;
    struct symtab_Pool * ppool;
    struct symtab_Population *ppopu;
    struct symtab_Projection *pproj;
    struct symtab_Randomvalue *pranv;
    struct symtab_Segment *psegment;
    struct symtab_String *pstring;
    struct symtab_VConnectionSymbol *pvconsy;
    struct symtab_VContour *pvcont;
    struct symtab_VSegment *pvsegm;
}

%{
//
// Neurospaces: a library which implements a global typed symbol table to
// be used in neurobiological model maintenance and simulation.
//
// $Id: parser.rules 1.242 Sat, 10 Nov 2007 17:28:42 -0600 hugo $
//

//////////////////////////////////////////////////////////////////////////////
//'
//' Neurospaces : testbed C implementation that integrates with genesis
//'
//' Copyright (C) 1999-2008 Hugo Cornelis
//'
//' functional ideas ..	Hugo Cornelis, hugo.cornelis@gmail.com
//'
//' coding ............	Hugo Cornelis, hugo.cornelis@gmail.com
//'
//////////////////////////////////////////////////////////////////////////////

//#include "lexsupport.h"
int yylex(YYSTYPE *lvalp, void *pacParserContext);
%}

%pure_parser

%start FullModelDescription

%type <phsle> EMContourSymbol
%type <pemc> EMContourSection
%type <pidin> EMContourSectionFront
%type <pemc> EMContourDescription
%type <phsle> EMContourComponent

%type <phsle> ContourGroupSymbol
%type <pvcont> ContourGroupSection
%type <pidin> ContourGroupSectionFront
%type <pvcont> ContourGroupDescription
%type <phsle> ContourGroupComponent

%type <phsle> ContourPointSymbol
%type <pcpnt> ContourPointSection
%type <pidin> ContourPointSectionFront
%type <pcpnt> ContourPointDescription

%type <phsle> GateKineticComponent
%type <pidin> GateKineticPartSectionFront

%type <pcgatk> ConcentrationGateKineticDescription
%type <pidin> ConcentrationGateKineticSectionFront
%type <pcgatk> ConcentrationGateKineticSection

%type <phsle> HHGateSymbol
%type <pgathh> HHGateSection
%type <pidin> HHGateSectionFront
%type <pgathh> HHGateDescription
%type <phsle> HHGateComponent
%type <phsle> ConcentrationGateKineticSymbol
%type <phsle> GateKineticBackwardSymbol
%type <phsle> GateKineticForwardSymbol
%type <phsle> GateKineticPartSymbol
%type <pgatk> GateKineticBackwardSection
%type <pidin> GateKineticBackwardSectionFront
%type <pgatk> GateKineticForwardSection
%type <pidin> GateKineticForwardSectionFront
%type <pgatk> GateKineticPartSection
%type <pgatk> GateKineticDescription

%type <phsle> AxonHillockComponent
%type <phsle> FiberModelSymbol
%type <pfibr> FiberModelSection
%type <pidin> FiberModelSectionFront
%type <pfibr> FiberModelDescription
%type <phsle> GroupedModelSymbol
%type <pgrup> GroupedModelSection
%type <pidin> GroupedModelSectionFront
%type <pgrup> GroupedModelDescription
%type <phsle> GroupedParametersSymbol
%type <pgrpp> GroupedParametersSection
%type <pidin> GroupedParametersSectionFront
%type <pgrpp> GroupedParametersDescription
%type <phsle> ChannelComponent
%type <phsle> SegmentComponent
%type <phsle> SegmentGroupComponent
%type <phsle> CellComponent
%type <phsle> RandomvalueComponent
%type <phsle> PopulationComponent
%type <phsle> ConnectionGroupComponent
%type <phsle> NetworkComponent
%type <phsle> ProjectionComponent
%type <phsle> AnySymbol
%type <phsle> AttachmentPointSymbol
%type <phsle> EquationExponentialSymbol
%type <phsle> PoolSymbol
%type <phsle> AxonHillockSymbol
%type <phsle> ChannelSymbol
%type <phsle> SegmentSymbol
%type <phsle> SegmentGroupSymbol
%type <phsle> CellSymbol
%type <phsle> RandomvalueSymbol
%type <phsle> PopulationSymbol
%type <phsle> ProjectionSymbol
%type <phsle> NetworkSymbol
%type <phsle> ConnectionGroupSymbol
%type <phsle> ConnectionSymbol
%type <patta> AttachmentPointSection
%type <pidin> AttachmentPointSectionFront
%type <patta> AttachmentPointDescription
%type <ppar> AttachmentPointData
%type <ppar> AttachmentPointAttributes
%type <pcIdentifier> AttachmentPointIncoming
%type <pcIdentifier> AttachmentPointOutgoing
%type <ppool> PoolSection
%type <pidin> PoolSectionFront
%type <ppool> PoolDescription
%type <pchan> ChannelSection
%type <pidin> ChannelSectionFront
%type <pchan> ChannelDescription
%type <paxhi> AxonHillockSection
%type <pidin> AxonHillockSectionFront
%type <paxhi> AxonHillockDescription
%type <peq> EquationExponentialSection
%type <pidin> EquationExponentialSectionFront
%type <peq> EquationExponentialDescription
%type <psegment> SegmentSection
%type <pidin> SegmentSectionFront
%type <psegment> SegmentDescription
%type <pvsegm> SegmentGroupSection
%type <pvsegm> SegmentGroupDescription
%type <pidin> SegmentGroupSectionFront
%type <iCompOptions> SegmentInstanceOptions
%type <pcell> CellSection
%type <pidin> CellSectionFront
%type <pcell> CellDescription
%type <pranv> RandomvalueSection
%type <pidin> RandomvalueSectionFront
%type <pranv> RandomvalueDescription
%type <ppopu> PopulationSection
%type <pidin> PopulationSectionFront
%type <ppopu> PopulationDescription
%type <pconsy> ConnectionSection
%type <pconsy> ConnectionDescription
%type <pidin> ConnectionSectionFront
%type <pvconsy> ConnectionGroupSection
%type <pvconsy> ConnectionGroupSectionFront
%type <pproj> ProjectionSection
%type <pidin> ProjectionSectionFront
%type <pproj> ProjectionDescription
%type <pnetw> NetworkSection
%type <pidin> NetworkSectionFront
%type <pnetw> NetworkDescription
%type <phsle> ChildSectionFront
%type <phsle> ChildSectionOptionalInputOptionalParameters
%type <phsle> OptionalChildSectionOptionalInputOptionalParameters
%type <pio> FixedItemInputRelations
%type <pio> OptionalItemInputRelations
%type <pio> ItemInputRelations
%type <ppar> OptionalItemParameters
%type <ppar> ItemParameters
%type <ppar> Attributes
%type <ppar> Parameters
%type <ppar> ParametersEnumerated
%type <ppar> Parameter
%type <pfun> FunctionSpecification
%type <pcIdentifier> FunctionIdentifier
%type <ppar> FunctionParameters
/* %type <ppar> FunctionParameter */
/* %type <pcIdentifier> FunctionParameterName */
/* %type <pioc> OptionalInputOutputRelations */
%type <pioc> InputOutputRelations
%type <pio> InputRelations
%type <pio> OutputRelations
%type <pidin> FieldOrIOOptionalHierarchical
%type <pidin> FieldOrIOHierarchical
%type <pidin> FieldOrIO
%type <pidin> Field
%type <pidin> IO
%type <pidin> IdentifierOptionIndex
/* %type <pidin> OptionalIdentifierOptionIndexPushedPidin */
/* %type <pidin> OptionalIdentifierOptionIndex */
%type <pidin> IdentifierOptionIndexPushedPidin
%type <pidin> IdentifierHierarchicalNameSpaceRooted
%type <pidin> IdentifierHierarchicalRooted
%type <pidin> IdentifierHierarchicalOptionalRooted
%type <pidin> IdentifierHierarchical
/* %type <pcIdentifier> OptionalIdentifier */
%type <pcIdentifier> Identifier
/* %type <iInteger> Integer */


%%


/*
**
** keyword conventions in regex syntax
**
**
** FullModelDescription : grammatical start symbol (root of derivation tree)
**
** .*Contents : grammatical entity that is reduced to a file contents
**		Every file level used to have its own symbol, actually obsoleted now.
**
** .*Component : grammatical entity that is reduced from .*Symbol and has
**			an associated struct symtab_HSolveListElement * 
**			semantic value.
**			It defines the .*Symbols allowed for the given 
**			component and thus defines the 'physiological'
**			hierarchy.
**
**	e.g. :	equation -> channel -> segment -> cell -> network
**		connection -> network
**
**		segment -> cell -> population -> network
**		connection -> projection -> network
**
** .*Symbol : grammatical entity that is reduced from .*Section and has
**		an associated struct symtab_HSolveListElement * 
**		semantic value.
**
** .*Section : grammatical entity surrounded with delimiting keywords
**		The beginning delimiting keyword is coded within a front 
**		section that normally also registers the current working 
**		element.
**		The ending delimiting keyword is coded within a ending section.
**		This section normally unregisters the working element.
**
**	e.g.	PoolSection : PoolSectionFront More_keywords PoolSectionEnd ;
**		PoolSectionEnd : END POOL ;
**		PoolSectionFront : POOL Identifier ;
**
**
** .*Description : grammatical entity inside a section, giving attributes for
**			one instance
**
**	e.g.	PoolSection : PoolSectionFront More_keywords PoolSectionEnd ;
**		PoolSectionFront : POOL Identifier ;
**		PoolSectionEnd : END POOL ;
**		PoolDescription : Keywords_giving_attributes_for_any_pool
**
**
*/

FullModelDescription
	:
		FullModelHeader
		FullModelContents
		FullModelTail
	;

FullModelHeader
	:
		/* ok if no interpreter sequence	*/
	|
		TOKEN_SHEBANGER
		{
#line
		    ParserStart();
		}
	;

FullModelContents		/* no type	*/
	:
		ParseStateHeader

		FullModelHeaderSection

		ParseStateDependencies

		DependenciesSection

		ParseStatePrivateModels

		PrivateModelsSection

		ParseStatePublicModels

		PublicModelsSection

		ParseStateDone
	;

FullModelTail
	:
		{
#line
		    ParserFinish();
		}
	;

/*
** tokens to register parser states (to avoid shift/reduce conflicts)
*/

ParseStateHeader
	:
		{
#line
		    //- register parsing-header state

		    ((PARSERCONTEXT *)pacParserContext)->iState
			= ((((PARSERCONTEXT *)pacParserContext)->iState
			     & ~PARSER_MASK_STATES)
			    | PARSER_STATE_HEADER);
		}
	;

ParseStateDependencies
	:
		{
#line
		    //- register parsing-dependencies state

		    ((PARSERCONTEXT *)pacParserContext)->iState
			= ((((PARSERCONTEXT *)pacParserContext)->iState
			     & ~PARSER_MASK_STATES)
			    | PARSER_STATE_DEPENDENCIES);
		}
	;

ParseStatePrivateModels
	:
		{
#line
		    //- register parsing-private-models state

		    ((PARSERCONTEXT *)pacParserContext)->iState
			= ((((PARSERCONTEXT *)pacParserContext)->iState
			     & ~PARSER_MASK_STATES)
			    | PARSER_STATE_PRIVATEMODELS);
		}
	;

ParseStatePublicModels
	:
		{
#line
		    //- register parsing-public-models state

		    ((PARSERCONTEXT *)pacParserContext)->iState
			= ((((PARSERCONTEXT *)pacParserContext)->iState
			     & ~PARSER_MASK_STATES)
			    | PARSER_STATE_PUBLICMODELS);
		}
	;

ParseStateDone
	:
		{
#line
		    //- unregister parsing state

		    ((PARSERCONTEXT *)pacParserContext)->iState
			= ((((PARSERCONTEXT *)pacParserContext)->iState
			     & ~PARSER_MASK_STATES)
			    | 0);
		}
	;

FullModelHeaderSection
	:
		TOKEN_NEUROSPACES
		ModelLevelIdentification
		{
#line
		    //t register/check type of file
		}
	;

ModelLevelIdentification
	:
		TOKEN_NDF
	;

DependenciesSection
	:
	|
		DependenciesSectionFront
			DependenciesEnumerated
		DependenciesSectionEnd
		{
#line
		}
	;

DependenciesSectionFront
	:
		TOKEN_IMPORT
	;

DependenciesSectionEnd
	:
		TOKEN_END TOKEN_IMPORT
		{
#line
		    //- give diagnostics : activation of dependencies

		    ParserMessage
			((PARSERCONTEXT *)pacParserContext,
			 LEVEL_GLOBALMSG_SYMBOLREPORT,
			 "DependenciesSectionEnd",
			 "Activating %s's dependencies"
			 "(dependency list not yet)",
			 ParserContextGetFilename
			 ((PARSERCONTEXT *)pacParserContext));
		}
	;


DependenciesEnumerated
	:
		{
#line
		    //! give msg : starting import of dependencies ?
		}
	|
		DependenciesEnumerated
		TOKEN_FILE
		Identifier
		TOKEN_STRING
		FileOptions
		{
#line
		    int bFail;
		    char *pc = NULL;

		    //- remove ending '"'

		    $4->pcString[$4->iLength - 1] = '\0';
		    pc = &$4->pcString[1];

		    //- qualify file name

		    pc
			= ParserContextQualifyFilename
			  ((PARSERCONTEXT *)pacParserContext, pc);

		    if (pc)
		    {
			//- if importing files is not disabled by the options

			if (!(((PARSERCONTEXT *)pacParserContext)
			      ->pneuro->pnsc->nso.iFlags & NSOFLAG_DISABLE_IMPORTING))
			{
			    //- parse cell file

			    //t pass description file specific options as parameter

			    bFail
				= ParserImport
				  ((PARSERCONTEXT *)pacParserContext,
				   pc,
				   $3);
			}
		    }
		    else
		    {
			NeurospacesError
			    ((PARSERCONTEXT *)pacParserContext,
			     "DependenciesEnumerated",
			     "Could not qualify '%s' (file not found ?)\n",
			     &$4->pcString[1]);
		    }

		    //! memory leak : $4
		}
	;

FileOptions
	:
		{
#line
		    //t pass options to stack
		}
	;

PrivateModelsSection
	:
	|
		PrivateModelsSectionFront
			PrivateModelsEnumerated
		PrivateModelsSectionEnd
		{
#line
		    //- give diagnostics : activation of private models

		    ParserMessage
			((PARSERCONTEXT *)pacParserContext,
			 LEVEL_GLOBALMSG_SYMBOLREPORT,
			 "PrivateModelsSection",
			 "Activating %s's private models"
			 "(private models list not yet)",
			 ParserContextGetFilename
			 ((PARSERCONTEXT *)pacParserContext));
		}
	;

PrivateModelsSectionFront
	:
		TOKEN_PRIVATE_MODELS
		{
#line
		}
	;

PrivateModelsSectionEnd
	:
		TOKEN_END TOKEN_PRIVATE_MODELS
		{
#line
		    //- give diagnostics : activation of private models

		    ParserMessage
			((PARSERCONTEXT *)pacParserContext,
			 LEVEL_GLOBALMSG_SYMBOLREPORT,
			 "PrivateModelsSectionEnd",
			 "Activating %s's private models"
			 "(private models list not yet)",
			 ParserContextGetFilename
			 ((PARSERCONTEXT *)pacParserContext));
		}
	;

/*
** enumeration of private models
**
*/

PrivateModelsEnumerated
	:
		{
#line
		}
	|
		PrivateModelsEnumerated

		/* export regular private model	 		*/

		AnySymbol
		{
#line
		    //- if private model description available

		    if ($2)
		    {
			//- add private model

			ParserAddPrivateModel
			    ((PARSERCONTEXT *)pacParserContext, $2);
		    }

		    //- else

		    else
		    {
			//- give diagnostics : empty private model

			//t warning instead of error

			NeurospacesError
			    ((PARSERCONTEXT *)pacParserContext,
			     "PrivateModelsEnumerated",
			     "Empty private model");
		    }
		}
	|
		PrivateModelsEnumerated

		/* export private model from dependencies	*/

		TOKEN_ALIAS
			IdentifierHierarchicalNameSpaceRooted
			Identifier
			OptionalItemParameters
			OptionalChildSectionOptionalInputOptionalParameters
		TOKEN_END TOKEN_ALIAS
		{
#line
		    //v alias target

		    struct symtab_HSolveListElement *phsleProto = NULL;

		    //- if model dependency lookup not disabled by the options

		    if (!(((PARSERCONTEXT *)pacParserContext)
			  ->pneuro->pnsc->nso.iFlags & NSOFLAG_DISABLE_DEPCY_LOOKUP))
		    {
			//- lookup refereed model in dependencies

			phsleProto
			    = ParserLookupDependencyModel
			      ((PARSERCONTEXT *)pacParserContext, $3);

			//- if symbol found

			if (phsleProto)
			{
			    struct symtab_HSolveListElement *phsle
				= SymbolCreateAlias(phsleProto, IdinNewFromChars($4));

			    //- set parameters

			    SymbolAssignParameters(phsle, $5);

			    //- link children

			    if ($6)
			    {
				SymbolAddChild(phsle, $6);

				//- reset actual symbol

				ParserContextSetActual
				    ((PARSERCONTEXT *)pacParserContext, phsle);
			    }

			    //- add private model

			    ParserAddPrivateModel
				((PARSERCONTEXT *)pacParserContext, phsle);
			}

			//- else

			else
			{
			    //- give error msg

			    NeurospacesError
				((PARSERCONTEXT *)pacParserContext,
				 "PrivateModelsEnumerated",
				 "Dependency Symbol(%s::%s) not found.",
				 $3->pcIdentifier
				 ? $3->pcIdentifier
				 : "NULL",
				 $3->pidinNext
				 && $3->pidinNext->pcIdentifier
				 ? $3->pidinNext->pcIdentifier
				 : "NULL");
			}
		    }
		}
	|
		PrivateModelsEnumerated

		/* export private model from dependencies	*/

		TOKEN_ALIAS
			Identifier
			Identifier
			OptionalItemParameters
			OptionalChildSectionOptionalInputOptionalParameters
		TOKEN_END TOKEN_ALIAS
		{
#line
		    //v alias target

		    struct symtab_HSolveListElement *phsleProto = NULL;

		    //- if model dependency lookup not disabled by the options

		    if (!(((PARSERCONTEXT *)pacParserContext)
			  ->pneuro->pnsc->nso.iFlags & NSOFLAG_DISABLE_DEPCY_LOOKUP))
		    {
			//- lookup private model, set as alias target

			phsleProto
			    = ParserLookupPrivateModel
			      (/*(PARSERCONTEXT *)pacParserContext,*/$3);

			//- if symbol found

			if (phsleProto)
			{
			    struct symtab_HSolveListElement *phsle
				= SymbolCreateAlias(phsleProto, IdinNewFromChars($4));

			    //- set parameters

			    SymbolAssignParameters(phsle, $5);

			    //- link children

			    if ($6)
			    {
				SymbolAddChild(phsle, $6);

				//- reset actual symbol

				ParserContextSetActual
				    ((PARSERCONTEXT *)pacParserContext, phsle);
			    }

			    //- add private model

			    ParserAddPrivateModel
				((PARSERCONTEXT *)pacParserContext, phsle);
			}

			//- else

			else
			{
			    //- give error msg

			    NeurospacesError
				((PARSERCONTEXT *)pacParserContext,
				 "PrivateModelsEnumerated",
				 "PrivateModel Symbol(%s) not found.",
				 $3 ? $3 : "NULL");
			}
		    }
		}
	;

PublicModelsSection
	:
	|
		PublicModelsSectionFront
			PublicModelsEnumerated
		PublicModelsSectionEnd
		{
#line
		}
	;

PublicModelsSectionFront
	:
		TOKEN_PUBLIC_MODELS
		{
#line
		    //- clear current element stack

		    ParserCurrentElementPopAll
			((PARSERCONTEXT *)pacParserContext);
		}
	;

PublicModelsSectionEnd
	:
		TOKEN_END TOKEN_PUBLIC_MODELS
		{
#line
		    //! makes private models invisible
		}
	;

PublicModelsEnumerated
	:
	|
		PublicModelsEnumerated
		TOKEN_ORIGIN TOKEN_NUMBER ',' TOKEN_NUMBER ',' TOKEN_NUMBER
	|
		PublicModelsEnumerated
		TOKEN_RELATIVE
/* 	| */
/* 		PublicModelsEnumerated */
/* 		TOKEN_ALGORITHM */
/* 		Identifier */
/* 		TOKEN_ALGORITHMPARAMETERS */
/* 		{ */
/* #line */
/* 		    //- import & init algorithm */

/* 		    //! because TOKEN_ALGORITHMPARAMETERS returns a string, */
/* 		    //! we loose some bytes here */
/* 		    //! perhaps they are on the stack, still needs a check */

/* 		    ParserAlgorithmImport */
/* 			((PARSERCONTEXT *)pacParserContext, */
/* 			 $3, */
/* 			 $4->pcString); */

/* 		    //t algorithm must be event based */
/* 		    //t register interested events from algorithm */
/* 		    //t install algorithm callback */
/* 		} */
/* 		TOKEN_END TOKEN_ALGORITHMPARAMETERS */
	|
		PublicModelsEnumerated
		AnySymbol
		{
#line
		    //- add symbol to models

		    ParserAddPublicModel
			((PARSERCONTEXT *)pacParserContext,
			 $2);
		}
	|
		PublicModelsEnumerated

		/* export model from private models	*/

		TOKEN_ALIAS
			Identifier
			Identifier
			OptionalItemParameters
			OptionalChildSectionOptionalInputOptionalParameters
		TOKEN_END TOKEN_ALIAS
		{
#line
		    //v alias target

		    struct symtab_HSolveListElement *phsleProto = NULL;

		    //- if private model lookup not disabled by the options

		    if (!(((PARSERCONTEXT *)pacParserContext)
			  ->pneuro->pnsc->nso.iFlags & NSOFLAG_DISABLE_PRIVATE_LOOKUP))
		    {
			//- lookup private model, set as alias target

			phsleProto
			    = ParserLookupPrivateModel
			      (/*(PARSERCONTEXT *)pacParserContext,*/$3);

			//- if symbol found

			if (phsleProto)
			{
			    struct symtab_HSolveListElement *phsle
				= SymbolCreateAlias(phsleProto, IdinNewFromChars($4));

			    //- set parameters

			    SymbolAssignParameters(phsle, $5);

			    //- link children

			    if ($6)
			    {
				SymbolAddChild(phsle, $6);

				//- reset actual symbol

				ParserContextSetActual
				    ((PARSERCONTEXT *)pacParserContext, phsle);
			    }

			    //- add model

			    ParserAddPublicModel
				((PARSERCONTEXT *)pacParserContext, phsle);
			}

			//- else

			else
			{
			    //- give error msg

			    NeurospacesError
				((PARSERCONTEXT *)pacParserContext,
				 "PublicModelsEnumerated",
				 "PrivateModel Symbol(%s) not found.",
				 $3 ? $3 : "NULL");
			}
		    }
		}
	;

